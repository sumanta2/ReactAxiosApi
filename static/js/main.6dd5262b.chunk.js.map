{"version":3,"sources":["App1.jsx","reportWebVitals.js","index.js"],"names":["App1","useState","active","confirmed","deaths","recovered","lastupdatedtime","data","setData","getCovidData","a","fetch","res","json","actualData","statewise","console","log","useEffect","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAwEeA,EAtEJ,WAGN,MAAqBC,mBAAS,CAACC,OAAQ,OAAQC,UAAW,OAAQC,OAAQ,OAAOC,UAAU,OAAOC,gBAAgB,SAAlH,mBAAOC,EAAP,KAAYC,EAAZ,KACKC,EAAY,uCAAC,8BAAAC,EAAA,+EAEKC,MAAM,0CAFX,cAELC,EAFK,gBAGUA,EAAIC,OAHd,OAGPC,EAHO,OAOXN,EAAQM,EAAWC,UAAU,IAPlB,kDAWXC,QAAQC,IAAR,MAXW,0DAAD,qDAiBlB,OAHAC,qBAAU,WACPT,MACD,IAEE,qCACI,qBAAKU,UAAU,QAAf,SACA,oBAAIA,UAAU,cAAd,iCAEA,oBAAIA,UAAU,iBAAd,0CACA,sBAAKA,UAAU,QAAf,UAEI,0BAASC,GAAG,OAAZ,UACI,sBAAMD,UAAU,QAAhB,iBACA,sBAAMA,UAAU,QAAhB,sBAAuC,uBACvC,sBAAMA,UAAU,OAAhB,sBAGJ,0BAASC,GAAG,OAAZ,UACI,sBAAMD,UAAU,QAAhB,mBACA,sBAAMA,UAAU,QAAhB,uBAAwC,uBACxC,uBAAMA,UAAU,QAAhB,cAA0BZ,EAAKF,gBAGnC,0BAASe,GAAG,OAAZ,UACI,sBAAMD,UAAU,QAAhB,mBACA,sBAAMA,UAAU,QAAhB,uBAAwC,uBACxC,sBAAMA,UAAU,QAAhB,SAAyBZ,EAAKJ,eAGlC,0BAASiB,GAAG,OAAZ,UACI,sBAAMD,UAAU,QAAhB,mBACA,sBAAMA,UAAU,QAAhB,mBAAoC,uBACpC,sBAAMA,UAAU,QAAhB,SAAyBZ,EAAKH,YAGlC,0BAASgB,GAAG,OAAZ,UACI,sBAAMD,UAAU,QAAhB,mBACA,sBAAMA,UAAU,QAAhB,oBAAqC,uBACrC,sBAAMA,UAAU,QAAhB,SAAyBZ,EAAKL,YAGlC,0BAASkB,GAAG,OAAZ,UACI,sBAAMD,UAAU,QAAhB,kBACA,sBAAMA,UAAU,QAAhB,oBAAqC,uBACrC,sBAAMA,UAAU,QAAhB,SAAyBZ,EAAKD,4BCpDnCe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6dd5262b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst App1=()=>\r\n{ \r\n    \r\n     const [data,setData]=useState({active: \"NONE\", confirmed: \"NONE\", deaths: \"NONE\",recovered:\"NONE\",lastupdatedtime:\"NONE\"});\r\n    const getCovidData=async ()=>{\r\n        try{\r\n            const res=await fetch('https://api.covid19india.org/data.json');\r\n            var actualData=await res.json();\r\n            // console.log(\"1\");\r\n\r\n            // console.log(actualData.statewise[0]);\r\n            setData(actualData.statewise[0]);\r\n        }\r\n        catch(err)\r\n        {\r\n            console.log(err);\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n       getCovidData()\r\n    },[])\r\n    return(\r\n        <>\r\n            <div className=\"fixed\">\r\n            <h1 className='center live'> üç≥Live</h1>\r\n            </div>\r\n            <h1 className='center heading'>COVID-19 CORONAVIRUS TRACKER</h1>\r\n            <div className='outer'>\r\n\r\n                <section id='sec1'>\r\n                    <span className='small'>OUR</span>\r\n                    <span className='large'> COUNTRY</span><br></br>\r\n                    <span className='data'>INDIA</span>\r\n                </section>\r\n\r\n                <section id='sec2'>\r\n                    <span className='small'>TOTAL</span>\r\n                    <span className='large'>RECOVERED</span><br></br>\r\n                    <span className='data1'> {data.recovered}</span>\r\n                </section>\r\n\r\n                <section id='sec3'>\r\n                    <span className='small'>TOTAL</span>\r\n                    <span className='large'>CONFIRMED</span><br></br>\r\n                    <span className='data2'>{data.confirmed}</span>\r\n                </section>\r\n\r\n                <section id='sec4'>\r\n                    <span className='small'>TOTAL</span>\r\n                    <span className='large'>DEATH</span><br></br>\r\n                    <span className='data3'>{data.deaths}</span>\r\n                </section>\r\n\r\n                <section id='sec5'>\r\n                    <span className='small'>TOTAL</span>\r\n                    <span className='large'>ACTIVE</span><br></br>\r\n                    <span className='data4'>{data.active}</span>\r\n                </section>\r\n\r\n                <section id='sec6'>\r\n                    <span className='small'>LAST</span>\r\n                    <span className='large'>UPDATE</span><br></br>\r\n                    <span className='data5'>{data.lastupdatedtime}</span>\r\n                </section>   \r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default App1;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App1 from './App1';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App1 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}